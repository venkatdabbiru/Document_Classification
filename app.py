# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1OMWfOZi4ZK65zv9V9kVoeLvTbfpnF_pN
"""

#!unzip /content/setupfiles.zip

import numpy as np
import sys
import os
import glob
import re
#import json

#from keras.applications.imagenet_utils import preprocess_input, decode_predictions
from keras.models import load_model
from keras.preprocessing import image
from keras.applications.vgg16 import preprocess_input
from keras.applications.vgg16 import decode_predictions
from werkzeug.utils import secure_filename
from PIL import Image

from flask import Flask, redirect, url_for, request, render_template

app=Flask(__name__)
model_path = 'my_doc_model_1.h5'
model=load_model(model_path)
#model._make_predict_function()

def model_predict(img_path, model):
    img = image.load_img(img_path, target_size=(224, 224))
    
    x = image.img_to_array(img)
    
    x = np.expand_dims(x, axis=0)
    
    x = preprocess_input(x)
    
    preds = model.predict(x)
    
    return preds

@app.route('/', methods=['GET'])
def index():
    return render_template('index.html')

@app.route('/predict', methods=['GET','POST'])
def upload():
    if request.method=="POST":
        f=request.files['file']
        basepath=os.path.dirname(__file__)
        file_path=os.path.join(
            basepath, 'uploads', secure_filename(f.filename))
        f.save(file_path)
        result = model_predict(file_path, model)
        print("Result values before Argmax....", result)
        y_classes = result.argmax(axis=-1)
        print("class is ----",y_classes)
        word_dict = {'advertisement': 0,
                     'email': 1,
                     'form': 2,
                     'handwritten': 3,
                     'invoice': 4,
                     'memo': 5,
                     'news_article': 6,
                     'resume': 7,
                     'scientific_publication': 8,
                     'specification': 9}
        result = [cat for cat, val in word_dict.items() if val == y_classes]
        print("Result is ----",result)
        
        #label = decode_predictions(result)
        #prediction = label[0][0]
        #label = prediction[1]
        #print('%s (%.2f%%)' % (label[1], label[2]*100))
        #train.class_indices
        #if result[0][0]==1:
            #prediction = 'NORMAL'
        #else:
            #prediction = 'PNEUMONIA'
            
        return str(result)
        
    return None

if __name__ == '__main__':
    #app.run(debug=True)
    app.run(debug=True, use_reloader=False)